/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.topcased.modeler.ispem.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;
import org.topcased.spem.util.SpemAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class SpemModelerProviderAdapterFactory extends SpemAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ExtensibleElement} instances.
	 * 
	 * @generated
	 */
	private ExtensibleElementModelerProvider extensibleelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Kind} instances.
	 * 
	 * @generated
	 */
	private KindModelerProvider kindModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkDefinitionPerformer} instances.
	 * 
	 * @generated
	 */
	private WorkDefinitionPerformerModelerProvider workdefinitionperformerModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkDefinition} instances.
	 * 
	 * @generated
	 */
	private WorkDefinitionModelerProvider workdefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkDefinitionParameter} instances.
	 * 
	 * @generated
	 */
	private WorkDefinitionParameterModelerProvider workdefinitionparameterModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.BreakdownElement} instances.
	 * 
	 * @generated
	 */
	private BreakdownElementModelerProvider breakdownelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkBreakdownElement} instances.
	 * 
	 * @generated
	 */
	private WorkBreakdownElementModelerProvider workbreakdownelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkSequence} instances.
	 * 
	 * @generated
	 */
	private WorkSequenceModelerProvider worksequenceModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Activity} instances.
	 * 
	 * @generated
	 */
	private ActivityModelerProvider activityModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessPerformer} instances.
	 * 
	 * @generated
	 */
	private ProcessPerformerModelerProvider processperformerModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.RoleUse} instances.
	 * 
	 * @generated
	 */
	private RoleUseModelerProvider roleuseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessResponsibilityAssignment} instances.
	 * 
	 * @generated
	 */
	private ProcessResponsibilityAssignmentModelerProvider processresponsibilityassignmentModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductUse} instances.
	 * 
	 * @generated
	 */
	private WorkProductUseModelerProvider workproductuseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductUseRelationship} instances.
	 * 
	 * @generated
	 */
	private WorkProductUseRelationshipModelerProvider workproductuserelationshipModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessParameter} instances.
	 * 
	 * @generated
	 */
	private ProcessParameterModelerProvider processparameterModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Milestone} instances.
	 * 
	 * @generated
	 */
	private MilestoneModelerProvider milestoneModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessElement} instances.
	 * 
	 * @generated
	 */
	private ProcessElementModelerProvider processelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.DescribableElement} instances.
	 * 
	 * @generated
	 */
	private DescribableElementModelerProvider describableelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Category} instances.
	 * 
	 * @generated
	 */
	private CategoryModelerProvider categoryModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Guidance} instances.
	 * 
	 * @generated
	 */
	private GuidanceModelerProvider guidanceModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Metric} instances.
	 * 
	 * @generated
	 */
	private MetricModelerProvider metricModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodContentElement} instances.
	 * 
	 * @generated
	 */
	private MethodContentElementModelerProvider methodcontentelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ToolDefinition} instances.
	 * 
	 * @generated
	 */
	private ToolDefinitionModelerProvider tooldefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.TaskDefinition} instances.
	 * 
	 * @generated
	 */
	private TaskDefinitionModelerProvider taskdefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Step} instances.
	 * 
	 * @generated
	 */
	private StepModelerProvider stepModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductDefinition} instances.
	 * 
	 * @generated
	 */
	private WorkProductDefinitionModelerProvider workproductdefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.RoleDefinition} instances.
	 * 
	 * @generated
	 */
	private RoleDefinitionModelerProvider roledefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductDefinitionRelationship} instances.
	 * 
	 * @generated
	 */
	private WorkProductDefinitionRelationshipModelerProvider workproductdefinitionrelationshipModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Default_TaskDefinitionPerformer} instances.
	 * 
	 * @generated
	 */
	private Default_TaskDefinitionPerformerModelerProvider default_taskdefinitionperformerModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Default_ResponsibilityAssignment} instances.
	 * 
	 * @generated
	 */
	private Default_ResponsibilityAssignmentModelerProvider default_responsibilityassignmentModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Default_TaskDefinitionParameter} instances.
	 * 
	 * @generated
	 */
	private Default_TaskDefinitionParameterModelerProvider default_taskdefinitionparameterModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.Qualification} instances.
	 * 
	 * @generated
	 */
	private QualificationModelerProvider qualificationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodContentPackageableElement} instances.
	 * 
	 * @generated
	 */
	private MethodContentPackageableElementModelerProvider methodcontentpackageableelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessPackageableElement} instances.
	 * 
	 * @generated
	 */
	private ProcessPackageableElementModelerProvider processpackageableelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodContentPackage} instances.
	 * 
	 * @generated
	 */
	private MethodContentPackageModelerProvider methodcontentpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessPackage} instances.
	 * 
	 * @generated
	 */
	private ProcessPackageModelerProvider processpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodContentKind} instances.
	 * 
	 * @generated
	 */
	private MethodContentKindModelerProvider methodcontentkindModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessKind} instances.
	 * 
	 * @generated
	 */
	private ProcessKindModelerProvider processkindModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.PlanningData} instances.
	 * 
	 * @generated
	 */
	private PlanningDataModelerProvider planningdataModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodContentUse} instances.
	 * 
	 * @generated
	 */
	private MethodContentUseModelerProvider methodcontentuseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.TaskUse} instances.
	 * 
	 * @generated
	 */
	private TaskUseModelerProvider taskuseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.CompositeRole} instances.
	 * 
	 * @generated
	 */
	private CompositeRoleModelerProvider compositeroleModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.TeamProfile} instances.
	 * 
	 * @generated
	 */
	private TeamProfileModelerProvider teamprofileModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.VariabilityElement} instances.
	 * 
	 * @generated
	 */
	private VariabilityElementModelerProvider variabilityelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessComponent} instances.
	 * 
	 * @generated
	 */
	private ProcessComponentModelerProvider processcomponentModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.ProcessComponentUse} instances.
	 * 
	 * @generated
	 */
	private ProcessComponentUseModelerProvider processcomponentuseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodLibraryPackageableElement} instances.
	 * 
	 * @generated
	 */
	private MethodLibraryPackageableElementModelerProvider methodlibrarypackageableelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodPluginPackageableElement} instances.
	 * 
	 * @generated
	 */
	private MethodPluginPackageableElementModelerProvider methodpluginpackageableelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodConfiguration} instances.
	 * 
	 * @generated
	 */
	private MethodConfigurationModelerProvider methodconfigurationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodPlugin} instances.
	 * 
	 * @generated
	 */
	private MethodPluginModelerProvider methodpluginModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.MethodLibrary} instances.
	 * 
	 * @generated
	 */
	private MethodLibraryModelerProvider methodlibraryModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductPort} instances.
	 * 
	 * @generated
	 */
	private WorkProductPortModelerProvider workproductportModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.WorkProductPortConnector} instances.
	 * 
	 * @generated
	 */
	private WorkProductPortConnectorModelerProvider workproductportconnectorModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public SpemModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ExtensibleElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExtensibleElementAdapter() {
		if (extensibleelementModelerProvider == null) {
			extensibleelementModelerProvider = new ExtensibleElementModelerProvider(
					this);
		}

		return extensibleelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Kind}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createKindAdapter() {
		if (kindModelerProvider == null) {
			kindModelerProvider = new KindModelerProvider(this);
		}

		return kindModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkDefinitionPerformer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkDefinitionPerformerAdapter() {
		if (workdefinitionperformerModelerProvider == null) {
			workdefinitionperformerModelerProvider = new WorkDefinitionPerformerModelerProvider(
					this);
		}

		return workdefinitionperformerModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkDefinitionAdapter() {
		if (workdefinitionModelerProvider == null) {
			workdefinitionModelerProvider = new WorkDefinitionModelerProvider(
					this);
		}

		return workdefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkDefinitionParameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkDefinitionParameterAdapter() {
		if (workdefinitionparameterModelerProvider == null) {
			workdefinitionparameterModelerProvider = new WorkDefinitionParameterModelerProvider(
					this);
		}

		return workdefinitionparameterModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.BreakdownElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createBreakdownElementAdapter() {
		if (breakdownelementModelerProvider == null) {
			breakdownelementModelerProvider = new BreakdownElementModelerProvider(
					this);
		}

		return breakdownelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkBreakdownElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkBreakdownElementAdapter() {
		if (workbreakdownelementModelerProvider == null) {
			workbreakdownelementModelerProvider = new WorkBreakdownElementModelerProvider(
					this);
		}

		return workbreakdownelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkSequence}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkSequenceAdapter() {
		if (worksequenceModelerProvider == null) {
			worksequenceModelerProvider = new WorkSequenceModelerProvider(this);
		}

		return worksequenceModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Activity}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createActivityAdapter() {
		if (activityModelerProvider == null) {
			activityModelerProvider = new ActivityModelerProvider(this);
		}

		return activityModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessPerformer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessPerformerAdapter() {
		if (processperformerModelerProvider == null) {
			processperformerModelerProvider = new ProcessPerformerModelerProvider(
					this);
		}

		return processperformerModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.RoleUse}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoleUseAdapter() {
		if (roleuseModelerProvider == null) {
			roleuseModelerProvider = new RoleUseModelerProvider(this);
		}

		return roleuseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessResponsibilityAssignment}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessResponsibilityAssignmentAdapter() {
		if (processresponsibilityassignmentModelerProvider == null) {
			processresponsibilityassignmentModelerProvider = new ProcessResponsibilityAssignmentModelerProvider(
					this);
		}

		return processresponsibilityassignmentModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductUse}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductUseAdapter() {
		if (workproductuseModelerProvider == null) {
			workproductuseModelerProvider = new WorkProductUseModelerProvider(
					this);
		}

		return workproductuseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductUseRelationship}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductUseRelationshipAdapter() {
		if (workproductuserelationshipModelerProvider == null) {
			workproductuserelationshipModelerProvider = new WorkProductUseRelationshipModelerProvider(
					this);
		}

		return workproductuserelationshipModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessParameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessParameterAdapter() {
		if (processparameterModelerProvider == null) {
			processparameterModelerProvider = new ProcessParameterModelerProvider(
					this);
		}

		return processparameterModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Milestone}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMilestoneAdapter() {
		if (milestoneModelerProvider == null) {
			milestoneModelerProvider = new MilestoneModelerProvider(this);
		}

		return milestoneModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessElementAdapter() {
		if (processelementModelerProvider == null) {
			processelementModelerProvider = new ProcessElementModelerProvider(
					this);
		}

		return processelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.DescribableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDescribableElementAdapter() {
		if (describableelementModelerProvider == null) {
			describableelementModelerProvider = new DescribableElementModelerProvider(
					this);
		}

		return describableelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Category}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCategoryAdapter() {
		if (categoryModelerProvider == null) {
			categoryModelerProvider = new CategoryModelerProvider(this);
		}

		return categoryModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Guidance}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGuidanceAdapter() {
		if (guidanceModelerProvider == null) {
			guidanceModelerProvider = new GuidanceModelerProvider(this);
		}

		return guidanceModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Metric}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMetricAdapter() {
		if (metricModelerProvider == null) {
			metricModelerProvider = new MetricModelerProvider(this);
		}

		return metricModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodContentElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodContentElementAdapter() {
		if (methodcontentelementModelerProvider == null) {
			methodcontentelementModelerProvider = new MethodContentElementModelerProvider(
					this);
		}

		return methodcontentelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ToolDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createToolDefinitionAdapter() {
		if (tooldefinitionModelerProvider == null) {
			tooldefinitionModelerProvider = new ToolDefinitionModelerProvider(
					this);
		}

		return tooldefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.TaskDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTaskDefinitionAdapter() {
		if (taskdefinitionModelerProvider == null) {
			taskdefinitionModelerProvider = new TaskDefinitionModelerProvider(
					this);
		}

		return taskdefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Step}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createStepAdapter() {
		if (stepModelerProvider == null) {
			stepModelerProvider = new StepModelerProvider(this);
		}

		return stepModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductDefinitionAdapter() {
		if (workproductdefinitionModelerProvider == null) {
			workproductdefinitionModelerProvider = new WorkProductDefinitionModelerProvider(
					this);
		}

		return workproductdefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.RoleDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoleDefinitionAdapter() {
		if (roledefinitionModelerProvider == null) {
			roledefinitionModelerProvider = new RoleDefinitionModelerProvider(
					this);
		}

		return roledefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductDefinitionRelationship}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductDefinitionRelationshipAdapter() {
		if (workproductdefinitionrelationshipModelerProvider == null) {
			workproductdefinitionrelationshipModelerProvider = new WorkProductDefinitionRelationshipModelerProvider(
					this);
		}

		return workproductdefinitionrelationshipModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Default_TaskDefinitionPerformer}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDefault_TaskDefinitionPerformerAdapter() {
		if (default_taskdefinitionperformerModelerProvider == null) {
			default_taskdefinitionperformerModelerProvider = new Default_TaskDefinitionPerformerModelerProvider(
					this);
		}

		return default_taskdefinitionperformerModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Default_ResponsibilityAssignment}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDefault_ResponsibilityAssignmentAdapter() {
		if (default_responsibilityassignmentModelerProvider == null) {
			default_responsibilityassignmentModelerProvider = new Default_ResponsibilityAssignmentModelerProvider(
					this);
		}

		return default_responsibilityassignmentModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Default_TaskDefinitionParameter}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDefault_TaskDefinitionParameterAdapter() {
		if (default_taskdefinitionparameterModelerProvider == null) {
			default_taskdefinitionparameterModelerProvider = new Default_TaskDefinitionParameterModelerProvider(
					this);
		}

		return default_taskdefinitionparameterModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.Qualification}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createQualificationAdapter() {
		if (qualificationModelerProvider == null) {
			qualificationModelerProvider = new QualificationModelerProvider(
					this);
		}

		return qualificationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodContentPackageableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodContentPackageableElementAdapter() {
		if (methodcontentpackageableelementModelerProvider == null) {
			methodcontentpackageableelementModelerProvider = new MethodContentPackageableElementModelerProvider(
					this);
		}

		return methodcontentpackageableelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessPackageableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessPackageableElementAdapter() {
		if (processpackageableelementModelerProvider == null) {
			processpackageableelementModelerProvider = new ProcessPackageableElementModelerProvider(
					this);
		}

		return processpackageableelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodContentPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodContentPackageAdapter() {
		if (methodcontentpackageModelerProvider == null) {
			methodcontentpackageModelerProvider = new MethodContentPackageModelerProvider(
					this);
		}

		return methodcontentpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessPackageAdapter() {
		if (processpackageModelerProvider == null) {
			processpackageModelerProvider = new ProcessPackageModelerProvider(
					this);
		}

		return processpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodContentKind}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodContentKindAdapter() {
		if (methodcontentkindModelerProvider == null) {
			methodcontentkindModelerProvider = new MethodContentKindModelerProvider(
					this);
		}

		return methodcontentkindModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessKind}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessKindAdapter() {
		if (processkindModelerProvider == null) {
			processkindModelerProvider = new ProcessKindModelerProvider(this);
		}

		return processkindModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.PlanningData}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPlanningDataAdapter() {
		if (planningdataModelerProvider == null) {
			planningdataModelerProvider = new PlanningDataModelerProvider(this);
		}

		return planningdataModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodContentUse}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodContentUseAdapter() {
		if (methodcontentuseModelerProvider == null) {
			methodcontentuseModelerProvider = new MethodContentUseModelerProvider(
					this);
		}

		return methodcontentuseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.TaskUse}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTaskUseAdapter() {
		if (taskuseModelerProvider == null) {
			taskuseModelerProvider = new TaskUseModelerProvider(this);
		}

		return taskuseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.CompositeRole}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCompositeRoleAdapter() {
		if (compositeroleModelerProvider == null) {
			compositeroleModelerProvider = new CompositeRoleModelerProvider(
					this);
		}

		return compositeroleModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.TeamProfile}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTeamProfileAdapter() {
		if (teamprofileModelerProvider == null) {
			teamprofileModelerProvider = new TeamProfileModelerProvider(this);
		}

		return teamprofileModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.VariabilityElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createVariabilityElementAdapter() {
		if (variabilityelementModelerProvider == null) {
			variabilityelementModelerProvider = new VariabilityElementModelerProvider(
					this);
		}

		return variabilityelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessComponent}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessComponentAdapter() {
		if (processcomponentModelerProvider == null) {
			processcomponentModelerProvider = new ProcessComponentModelerProvider(
					this);
		}

		return processcomponentModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.ProcessComponentUse}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessComponentUseAdapter() {
		if (processcomponentuseModelerProvider == null) {
			processcomponentuseModelerProvider = new ProcessComponentUseModelerProvider(
					this);
		}

		return processcomponentuseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodLibraryPackageableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodLibraryPackageableElementAdapter() {
		if (methodlibrarypackageableelementModelerProvider == null) {
			methodlibrarypackageableelementModelerProvider = new MethodLibraryPackageableElementModelerProvider(
					this);
		}

		return methodlibrarypackageableelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodPluginPackageableElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodPluginPackageableElementAdapter() {
		if (methodpluginpackageableelementModelerProvider == null) {
			methodpluginpackageableelementModelerProvider = new MethodPluginPackageableElementModelerProvider(
					this);
		}

		return methodpluginpackageableelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodConfiguration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodConfigurationAdapter() {
		if (methodconfigurationModelerProvider == null) {
			methodconfigurationModelerProvider = new MethodConfigurationModelerProvider(
					this);
		}

		return methodconfigurationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodPlugin}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodPluginAdapter() {
		if (methodpluginModelerProvider == null) {
			methodpluginModelerProvider = new MethodPluginModelerProvider(this);
		}

		return methodpluginModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.MethodLibrary}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createMethodLibraryAdapter() {
		if (methodlibraryModelerProvider == null) {
			methodlibraryModelerProvider = new MethodLibraryModelerProvider(
					this);
		}

		return methodlibraryModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductPort}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductPortAdapter() {
		if (workproductportModelerProvider == null) {
			workproductportModelerProvider = new WorkProductPortModelerProvider(
					this);
		}

		return workproductportModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.WorkProductPortConnector}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductPortConnectorAdapter() {
		if (workproductportconnectorModelerProvider == null) {
			workproductportconnectorModelerProvider = new WorkProductPortConnectorModelerProvider(
					this);
		}

		return workproductportconnectorModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (extensibleelementModelerProvider != null) {
			extensibleelementModelerProvider.dispose();
		}
		if (kindModelerProvider != null) {
			kindModelerProvider.dispose();
		}
		if (workdefinitionperformerModelerProvider != null) {
			workdefinitionperformerModelerProvider.dispose();
		}
		if (workdefinitionModelerProvider != null) {
			workdefinitionModelerProvider.dispose();
		}
		if (workdefinitionparameterModelerProvider != null) {
			workdefinitionparameterModelerProvider.dispose();
		}
		if (breakdownelementModelerProvider != null) {
			breakdownelementModelerProvider.dispose();
		}
		if (workbreakdownelementModelerProvider != null) {
			workbreakdownelementModelerProvider.dispose();
		}
		if (worksequenceModelerProvider != null) {
			worksequenceModelerProvider.dispose();
		}
		if (activityModelerProvider != null) {
			activityModelerProvider.dispose();
		}
		if (processperformerModelerProvider != null) {
			processperformerModelerProvider.dispose();
		}
		if (roleuseModelerProvider != null) {
			roleuseModelerProvider.dispose();
		}
		if (processresponsibilityassignmentModelerProvider != null) {
			processresponsibilityassignmentModelerProvider.dispose();
		}
		if (workproductuseModelerProvider != null) {
			workproductuseModelerProvider.dispose();
		}
		if (workproductuserelationshipModelerProvider != null) {
			workproductuserelationshipModelerProvider.dispose();
		}
		if (processparameterModelerProvider != null) {
			processparameterModelerProvider.dispose();
		}
		if (milestoneModelerProvider != null) {
			milestoneModelerProvider.dispose();
		}
		if (processelementModelerProvider != null) {
			processelementModelerProvider.dispose();
		}
		if (describableelementModelerProvider != null) {
			describableelementModelerProvider.dispose();
		}
		if (categoryModelerProvider != null) {
			categoryModelerProvider.dispose();
		}
		if (guidanceModelerProvider != null) {
			guidanceModelerProvider.dispose();
		}
		if (metricModelerProvider != null) {
			metricModelerProvider.dispose();
		}
		if (methodcontentelementModelerProvider != null) {
			methodcontentelementModelerProvider.dispose();
		}
		if (tooldefinitionModelerProvider != null) {
			tooldefinitionModelerProvider.dispose();
		}
		if (taskdefinitionModelerProvider != null) {
			taskdefinitionModelerProvider.dispose();
		}
		if (stepModelerProvider != null) {
			stepModelerProvider.dispose();
		}
		if (workproductdefinitionModelerProvider != null) {
			workproductdefinitionModelerProvider.dispose();
		}
		if (roledefinitionModelerProvider != null) {
			roledefinitionModelerProvider.dispose();
		}
		if (workproductdefinitionrelationshipModelerProvider != null) {
			workproductdefinitionrelationshipModelerProvider.dispose();
		}
		if (default_taskdefinitionperformerModelerProvider != null) {
			default_taskdefinitionperformerModelerProvider.dispose();
		}
		if (default_responsibilityassignmentModelerProvider != null) {
			default_responsibilityassignmentModelerProvider.dispose();
		}
		if (default_taskdefinitionparameterModelerProvider != null) {
			default_taskdefinitionparameterModelerProvider.dispose();
		}
		if (qualificationModelerProvider != null) {
			qualificationModelerProvider.dispose();
		}
		if (methodcontentpackageableelementModelerProvider != null) {
			methodcontentpackageableelementModelerProvider.dispose();
		}
		if (processpackageableelementModelerProvider != null) {
			processpackageableelementModelerProvider.dispose();
		}
		if (methodcontentpackageModelerProvider != null) {
			methodcontentpackageModelerProvider.dispose();
		}
		if (processpackageModelerProvider != null) {
			processpackageModelerProvider.dispose();
		}
		if (methodcontentkindModelerProvider != null) {
			methodcontentkindModelerProvider.dispose();
		}
		if (processkindModelerProvider != null) {
			processkindModelerProvider.dispose();
		}
		if (planningdataModelerProvider != null) {
			planningdataModelerProvider.dispose();
		}
		if (methodcontentuseModelerProvider != null) {
			methodcontentuseModelerProvider.dispose();
		}
		if (taskuseModelerProvider != null) {
			taskuseModelerProvider.dispose();
		}
		if (compositeroleModelerProvider != null) {
			compositeroleModelerProvider.dispose();
		}
		if (teamprofileModelerProvider != null) {
			teamprofileModelerProvider.dispose();
		}
		if (variabilityelementModelerProvider != null) {
			variabilityelementModelerProvider.dispose();
		}
		if (processcomponentModelerProvider != null) {
			processcomponentModelerProvider.dispose();
		}
		if (processcomponentuseModelerProvider != null) {
			processcomponentuseModelerProvider.dispose();
		}
		if (methodlibrarypackageableelementModelerProvider != null) {
			methodlibrarypackageableelementModelerProvider.dispose();
		}
		if (methodpluginpackageableelementModelerProvider != null) {
			methodpluginpackageableelementModelerProvider.dispose();
		}
		if (methodconfigurationModelerProvider != null) {
			methodconfigurationModelerProvider.dispose();
		}
		if (methodpluginModelerProvider != null) {
			methodpluginModelerProvider.dispose();
		}
		if (methodlibraryModelerProvider != null) {
			methodlibraryModelerProvider.dispose();
		}
		if (workproductportModelerProvider != null) {
			workproductportModelerProvider.dispose();
		}
		if (workproductportconnectorModelerProvider != null) {
			workproductportconnectorModelerProvider.dispose();
		}
	}

}
