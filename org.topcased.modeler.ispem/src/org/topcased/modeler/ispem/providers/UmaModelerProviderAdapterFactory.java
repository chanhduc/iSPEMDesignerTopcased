/*******************************************************************************
 * No CopyrightText Defined in the configurator file.
 ******************************************************************************/
package org.topcased.modeler.ispem.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;
import org.topcased.spem.uma.util.UmaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class UmaModelerProviderAdapterFactory extends UmaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Artifact} instances.
	 * 
	 * @generated
	 */
	private ArtifactModelerProvider artifactModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.CapabilityPattern} instances.
	 * 
	 * @generated
	 */
	private CapabilityPatternModelerProvider capabilitypatternModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Checklist} instances.
	 * 
	 * @generated
	 */
	private ChecklistModelerProvider checklistModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Concept} instances.
	 * 
	 * @generated
	 */
	private ConceptModelerProvider conceptModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.CategoryPackage} instances.
	 * 
	 * @generated
	 */
	private CategoryPackageModelerProvider categorypackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.CustomCategory} instances.
	 * 
	 * @generated
	 */
	private CustomCategoryModelerProvider customcategoryModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Deliverable} instances.
	 * 
	 * @generated
	 */
	private DeliverableModelerProvider deliverableModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Process} instances.
	 * 
	 * @generated
	 */
	private ProcessModelerProvider processModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.DeliveryProcess} instances.
	 * 
	 * @generated
	 */
	private DeliveryProcessModelerProvider deliveryprocessModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Discipline} instances.
	 * 
	 * @generated
	 */
	private DisciplineModelerProvider disciplineModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.DisciplineGrouping} instances.
	 * 
	 * @generated
	 */
	private DisciplineGroupingModelerProvider disciplinegroupingModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Root} instances.
	 * 
	 * @generated
	 */
	private RootModelerProvider rootModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Domain} instances.
	 * 
	 * @generated
	 */
	private DomainModelerProvider domainModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.EstimatingConsideration} instances.
	 * 
	 * @generated
	 */
	private EstimatingConsiderationModelerProvider estimatingconsiderationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Example} instances.
	 * 
	 * @generated
	 */
	private ExampleModelerProvider exampleModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Iteration} instances.
	 * 
	 * @generated
	 */
	private IterationModelerProvider iterationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Outcome} instances.
	 * 
	 * @generated
	 */
	private OutcomeModelerProvider outcomeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Phase} instances.
	 * 
	 * @generated
	 */
	private PhaseModelerProvider phaseModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Practice} instances.
	 * 
	 * @generated
	 */
	private PracticeModelerProvider practiceModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ProcessPlanningTemplate} instances.
	 * 
	 * @generated
	 */
	private ProcessPlanningTemplateModelerProvider processplanningtemplateModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Report} instances.
	 * 
	 * @generated
	 */
	private ReportModelerProvider reportModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ReusableAsset} instances.
	 * 
	 * @generated
	 */
	private ReusableAssetModelerProvider reusableassetModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Roadmap} instances.
	 * 
	 * @generated
	 */
	private RoadmapModelerProvider roadmapModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Template} instances.
	 * 
	 * @generated
	 */
	private TemplateModelerProvider templateModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.TermDefinition} instances.
	 * 
	 * @generated
	 */
	private TermDefinitionModelerProvider termdefinitionModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ToolMentor} instances.
	 * 
	 * @generated
	 */
	private ToolMentorModelerProvider toolmentorModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Whitepaper} instances.
	 * 
	 * @generated
	 */
	private WhitepaperModelerProvider whitepaperModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.Guideline} instances.
	 * 
	 * @generated
	 */
	private GuidelineModelerProvider guidelineModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.SupportingMaterial} instances.
	 * 
	 * @generated
	 */
	private SupportingMaterialModelerProvider supportingmaterialModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.RoleDefinitionPackage} instances.
	 * 
	 * @generated
	 */
	private RoleDefinitionPackageModelerProvider roledefinitionpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.TaskDefinitionPackage} instances.
	 * 
	 * @generated
	 */
	private TaskDefinitionPackageModelerProvider taskdefinitionpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.WorkProductDefinitionPackage} instances.
	 * 
	 * @generated
	 */
	private WorkProductDefinitionPackageModelerProvider workproductdefinitionpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.GuidancePackage} instances.
	 * 
	 * @generated
	 */
	private GuidancePackageModelerProvider guidancepackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.DisciplinePackage} instances.
	 * 
	 * @generated
	 */
	private DisciplinePackageModelerProvider disciplinepackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.DomainPackage} instances.
	 * 
	 * @generated
	 */
	private DomainPackageModelerProvider domainpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.WorkProductKindPackage} instances.
	 * 
	 * @generated
	 */
	private WorkProductKindPackageModelerProvider workproductkindpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.RoleSetPackage} instances.
	 * 
	 * @generated
	 */
	private RoleSetPackageModelerProvider rolesetpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ToolDefinitionPackage} instances.
	 * 
	 * @generated
	 */
	private ToolDefinitionPackageModelerProvider tooldefinitionpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ConfigurationPackage} instances.
	 * 
	 * @generated
	 */
	private ConfigurationPackageModelerProvider configurationpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.CapabilityPatternPackage} instances.
	 * 
	 * @generated
	 */
	private CapabilityPatternPackageModelerProvider capabilitypatternpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.DeliveryProcessPackage} instances.
	 * 
	 * @generated
	 */
	private DeliveryProcessPackageModelerProvider deliveryprocesspackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.RoleSet} instances.
	 * 
	 * @generated
	 */
	private RoleSetModelerProvider rolesetModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.QualificationPackage} instances.
	 * 
	 * @generated
	 */
	private QualificationPackageModelerProvider qualificationpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.ProcessComponentPackage} instances.
	 * 
	 * @generated
	 */
	private ProcessComponentPackageModelerProvider processcomponentpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.spem.uma.WorkProductKind} instances.
	 * 
	 * @generated
	 */
	private WorkProductKindModelerProvider workproductkindModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public UmaModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Artifact}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createArtifactAdapter() {
		if (artifactModelerProvider == null) {
			artifactModelerProvider = new ArtifactModelerProvider(this);
		}

		return artifactModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.CapabilityPattern}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCapabilityPatternAdapter() {
		if (capabilitypatternModelerProvider == null) {
			capabilitypatternModelerProvider = new CapabilityPatternModelerProvider(
					this);
		}

		return capabilitypatternModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Checklist}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createChecklistAdapter() {
		if (checklistModelerProvider == null) {
			checklistModelerProvider = new ChecklistModelerProvider(this);
		}

		return checklistModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Concept}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConceptAdapter() {
		if (conceptModelerProvider == null) {
			conceptModelerProvider = new ConceptModelerProvider(this);
		}

		return conceptModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.CategoryPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCategoryPackageAdapter() {
		if (categorypackageModelerProvider == null) {
			categorypackageModelerProvider = new CategoryPackageModelerProvider(
					this);
		}

		return categorypackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.CustomCategory}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCustomCategoryAdapter() {
		if (customcategoryModelerProvider == null) {
			customcategoryModelerProvider = new CustomCategoryModelerProvider(
					this);
		}

		return customcategoryModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Deliverable}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDeliverableAdapter() {
		if (deliverableModelerProvider == null) {
			deliverableModelerProvider = new DeliverableModelerProvider(this);
		}

		return deliverableModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Process}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessAdapter() {
		if (processModelerProvider == null) {
			processModelerProvider = new ProcessModelerProvider(this);
		}

		return processModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.DeliveryProcess}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDeliveryProcessAdapter() {
		if (deliveryprocessModelerProvider == null) {
			deliveryprocessModelerProvider = new DeliveryProcessModelerProvider(
					this);
		}

		return deliveryprocessModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Discipline}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDisciplineAdapter() {
		if (disciplineModelerProvider == null) {
			disciplineModelerProvider = new DisciplineModelerProvider(this);
		}

		return disciplineModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.DisciplineGrouping}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDisciplineGroupingAdapter() {
		if (disciplinegroupingModelerProvider == null) {
			disciplinegroupingModelerProvider = new DisciplineGroupingModelerProvider(
					this);
		}

		return disciplinegroupingModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Root}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRootAdapter() {
		if (rootModelerProvider == null) {
			rootModelerProvider = new RootModelerProvider(this);
		}

		return rootModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Domain}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDomainAdapter() {
		if (domainModelerProvider == null) {
			domainModelerProvider = new DomainModelerProvider(this);
		}

		return domainModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.EstimatingConsideration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEstimatingConsiderationAdapter() {
		if (estimatingconsiderationModelerProvider == null) {
			estimatingconsiderationModelerProvider = new EstimatingConsiderationModelerProvider(
					this);
		}

		return estimatingconsiderationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Example}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createExampleAdapter() {
		if (exampleModelerProvider == null) {
			exampleModelerProvider = new ExampleModelerProvider(this);
		}

		return exampleModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Iteration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createIterationAdapter() {
		if (iterationModelerProvider == null) {
			iterationModelerProvider = new IterationModelerProvider(this);
		}

		return iterationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Outcome}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createOutcomeAdapter() {
		if (outcomeModelerProvider == null) {
			outcomeModelerProvider = new OutcomeModelerProvider(this);
		}

		return outcomeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Phase}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPhaseAdapter() {
		if (phaseModelerProvider == null) {
			phaseModelerProvider = new PhaseModelerProvider(this);
		}

		return phaseModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Practice}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createPracticeAdapter() {
		if (practiceModelerProvider == null) {
			practiceModelerProvider = new PracticeModelerProvider(this);
		}

		return practiceModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ProcessPlanningTemplate}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessPlanningTemplateAdapter() {
		if (processplanningtemplateModelerProvider == null) {
			processplanningtemplateModelerProvider = new ProcessPlanningTemplateModelerProvider(
					this);
		}

		return processplanningtemplateModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Report}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createReportAdapter() {
		if (reportModelerProvider == null) {
			reportModelerProvider = new ReportModelerProvider(this);
		}

		return reportModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ReusableAsset}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createReusableAssetAdapter() {
		if (reusableassetModelerProvider == null) {
			reusableassetModelerProvider = new ReusableAssetModelerProvider(
					this);
		}

		return reusableassetModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Roadmap}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoadmapAdapter() {
		if (roadmapModelerProvider == null) {
			roadmapModelerProvider = new RoadmapModelerProvider(this);
		}

		return roadmapModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Template}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTemplateAdapter() {
		if (templateModelerProvider == null) {
			templateModelerProvider = new TemplateModelerProvider(this);
		}

		return templateModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.TermDefinition}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTermDefinitionAdapter() {
		if (termdefinitionModelerProvider == null) {
			termdefinitionModelerProvider = new TermDefinitionModelerProvider(
					this);
		}

		return termdefinitionModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ToolMentor}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createToolMentorAdapter() {
		if (toolmentorModelerProvider == null) {
			toolmentorModelerProvider = new ToolMentorModelerProvider(this);
		}

		return toolmentorModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Whitepaper}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWhitepaperAdapter() {
		if (whitepaperModelerProvider == null) {
			whitepaperModelerProvider = new WhitepaperModelerProvider(this);
		}

		return whitepaperModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.Guideline}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGuidelineAdapter() {
		if (guidelineModelerProvider == null) {
			guidelineModelerProvider = new GuidelineModelerProvider(this);
		}

		return guidelineModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.SupportingMaterial}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createSupportingMaterialAdapter() {
		if (supportingmaterialModelerProvider == null) {
			supportingmaterialModelerProvider = new SupportingMaterialModelerProvider(
					this);
		}

		return supportingmaterialModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.RoleDefinitionPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoleDefinitionPackageAdapter() {
		if (roledefinitionpackageModelerProvider == null) {
			roledefinitionpackageModelerProvider = new RoleDefinitionPackageModelerProvider(
					this);
		}

		return roledefinitionpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.TaskDefinitionPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTaskDefinitionPackageAdapter() {
		if (taskdefinitionpackageModelerProvider == null) {
			taskdefinitionpackageModelerProvider = new TaskDefinitionPackageModelerProvider(
					this);
		}

		return taskdefinitionpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.WorkProductDefinitionPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductDefinitionPackageAdapter() {
		if (workproductdefinitionpackageModelerProvider == null) {
			workproductdefinitionpackageModelerProvider = new WorkProductDefinitionPackageModelerProvider(
					this);
		}

		return workproductdefinitionpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.GuidancePackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createGuidancePackageAdapter() {
		if (guidancepackageModelerProvider == null) {
			guidancepackageModelerProvider = new GuidancePackageModelerProvider(
					this);
		}

		return guidancepackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.DisciplinePackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDisciplinePackageAdapter() {
		if (disciplinepackageModelerProvider == null) {
			disciplinepackageModelerProvider = new DisciplinePackageModelerProvider(
					this);
		}

		return disciplinepackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.DomainPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDomainPackageAdapter() {
		if (domainpackageModelerProvider == null) {
			domainpackageModelerProvider = new DomainPackageModelerProvider(
					this);
		}

		return domainpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.WorkProductKindPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductKindPackageAdapter() {
		if (workproductkindpackageModelerProvider == null) {
			workproductkindpackageModelerProvider = new WorkProductKindPackageModelerProvider(
					this);
		}

		return workproductkindpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.RoleSetPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoleSetPackageAdapter() {
		if (rolesetpackageModelerProvider == null) {
			rolesetpackageModelerProvider = new RoleSetPackageModelerProvider(
					this);
		}

		return rolesetpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ToolDefinitionPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createToolDefinitionPackageAdapter() {
		if (tooldefinitionpackageModelerProvider == null) {
			tooldefinitionpackageModelerProvider = new ToolDefinitionPackageModelerProvider(
					this);
		}

		return tooldefinitionpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ConfigurationPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createConfigurationPackageAdapter() {
		if (configurationpackageModelerProvider == null) {
			configurationpackageModelerProvider = new ConfigurationPackageModelerProvider(
					this);
		}

		return configurationpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.CapabilityPatternPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createCapabilityPatternPackageAdapter() {
		if (capabilitypatternpackageModelerProvider == null) {
			capabilitypatternpackageModelerProvider = new CapabilityPatternPackageModelerProvider(
					this);
		}

		return capabilitypatternpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.DeliveryProcessPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createDeliveryProcessPackageAdapter() {
		if (deliveryprocesspackageModelerProvider == null) {
			deliveryprocesspackageModelerProvider = new DeliveryProcessPackageModelerProvider(
					this);
		}

		return deliveryprocesspackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.RoleSet}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createRoleSetAdapter() {
		if (rolesetModelerProvider == null) {
			rolesetModelerProvider = new RoleSetModelerProvider(this);
		}

		return rolesetModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.QualificationPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createQualificationPackageAdapter() {
		if (qualificationpackageModelerProvider == null) {
			qualificationpackageModelerProvider = new QualificationPackageModelerProvider(
					this);
		}

		return qualificationpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.ProcessComponentPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createProcessComponentPackageAdapter() {
		if (processcomponentpackageModelerProvider == null) {
			processcomponentpackageModelerProvider = new ProcessComponentPackageModelerProvider(
					this);
		}

		return processcomponentpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link org.topcased.spem.uma.WorkProductKind}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createWorkProductKindAdapter() {
		if (workproductkindModelerProvider == null) {
			workproductkindModelerProvider = new WorkProductKindModelerProvider(
					this);
		}

		return workproductkindModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (artifactModelerProvider != null) {
			artifactModelerProvider.dispose();
		}
		if (capabilitypatternModelerProvider != null) {
			capabilitypatternModelerProvider.dispose();
		}
		if (checklistModelerProvider != null) {
			checklistModelerProvider.dispose();
		}
		if (conceptModelerProvider != null) {
			conceptModelerProvider.dispose();
		}
		if (categorypackageModelerProvider != null) {
			categorypackageModelerProvider.dispose();
		}
		if (customcategoryModelerProvider != null) {
			customcategoryModelerProvider.dispose();
		}
		if (deliverableModelerProvider != null) {
			deliverableModelerProvider.dispose();
		}
		if (processModelerProvider != null) {
			processModelerProvider.dispose();
		}
		if (deliveryprocessModelerProvider != null) {
			deliveryprocessModelerProvider.dispose();
		}
		if (disciplineModelerProvider != null) {
			disciplineModelerProvider.dispose();
		}
		if (disciplinegroupingModelerProvider != null) {
			disciplinegroupingModelerProvider.dispose();
		}
		if (rootModelerProvider != null) {
			rootModelerProvider.dispose();
		}
		if (domainModelerProvider != null) {
			domainModelerProvider.dispose();
		}
		if (estimatingconsiderationModelerProvider != null) {
			estimatingconsiderationModelerProvider.dispose();
		}
		if (exampleModelerProvider != null) {
			exampleModelerProvider.dispose();
		}
		if (iterationModelerProvider != null) {
			iterationModelerProvider.dispose();
		}
		if (outcomeModelerProvider != null) {
			outcomeModelerProvider.dispose();
		}
		if (phaseModelerProvider != null) {
			phaseModelerProvider.dispose();
		}
		if (practiceModelerProvider != null) {
			practiceModelerProvider.dispose();
		}
		if (processplanningtemplateModelerProvider != null) {
			processplanningtemplateModelerProvider.dispose();
		}
		if (reportModelerProvider != null) {
			reportModelerProvider.dispose();
		}
		if (reusableassetModelerProvider != null) {
			reusableassetModelerProvider.dispose();
		}
		if (roadmapModelerProvider != null) {
			roadmapModelerProvider.dispose();
		}
		if (templateModelerProvider != null) {
			templateModelerProvider.dispose();
		}
		if (termdefinitionModelerProvider != null) {
			termdefinitionModelerProvider.dispose();
		}
		if (toolmentorModelerProvider != null) {
			toolmentorModelerProvider.dispose();
		}
		if (whitepaperModelerProvider != null) {
			whitepaperModelerProvider.dispose();
		}
		if (guidelineModelerProvider != null) {
			guidelineModelerProvider.dispose();
		}
		if (supportingmaterialModelerProvider != null) {
			supportingmaterialModelerProvider.dispose();
		}
		if (roledefinitionpackageModelerProvider != null) {
			roledefinitionpackageModelerProvider.dispose();
		}
		if (taskdefinitionpackageModelerProvider != null) {
			taskdefinitionpackageModelerProvider.dispose();
		}
		if (workproductdefinitionpackageModelerProvider != null) {
			workproductdefinitionpackageModelerProvider.dispose();
		}
		if (guidancepackageModelerProvider != null) {
			guidancepackageModelerProvider.dispose();
		}
		if (disciplinepackageModelerProvider != null) {
			disciplinepackageModelerProvider.dispose();
		}
		if (domainpackageModelerProvider != null) {
			domainpackageModelerProvider.dispose();
		}
		if (workproductkindpackageModelerProvider != null) {
			workproductkindpackageModelerProvider.dispose();
		}
		if (rolesetpackageModelerProvider != null) {
			rolesetpackageModelerProvider.dispose();
		}
		if (tooldefinitionpackageModelerProvider != null) {
			tooldefinitionpackageModelerProvider.dispose();
		}
		if (configurationpackageModelerProvider != null) {
			configurationpackageModelerProvider.dispose();
		}
		if (capabilitypatternpackageModelerProvider != null) {
			capabilitypatternpackageModelerProvider.dispose();
		}
		if (deliveryprocesspackageModelerProvider != null) {
			deliveryprocesspackageModelerProvider.dispose();
		}
		if (rolesetModelerProvider != null) {
			rolesetModelerProvider.dispose();
		}
		if (qualificationpackageModelerProvider != null) {
			qualificationpackageModelerProvider.dispose();
		}
		if (processcomponentpackageModelerProvider != null) {
			processcomponentpackageModelerProvider.dispose();
		}
		if (workproductkindModelerProvider != null) {
			workproductkindModelerProvider.dispose();
		}
	}

}
