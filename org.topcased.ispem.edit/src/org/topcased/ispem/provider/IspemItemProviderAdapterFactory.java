/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.topcased.ispem.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.topcased.ispem.util.IspemAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IspemItemProviderAdapterFactory extends IspemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IspemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.EngineeringDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EngineeringDomainItemProvider engineeringDomainItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.EngineeringDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEngineeringDomainAdapter() {
		if (engineeringDomainItemProvider == null) {
			engineeringDomainItemProvider = new EngineeringDomainItemProvider(this);
		}

		return engineeringDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.ToolDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolDefinitionItemProvider toolDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.ToolDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createToolDefinitionAdapter() {
		if (toolDefinitionItemProvider == null) {
			toolDefinitionItemProvider = new ToolDefinitionItemProvider(this);
		}

		return toolDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.Viewpoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewpointItemProvider viewpointItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.Viewpoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createViewpointAdapter() {
		if (viewpointItemProvider == null) {
			viewpointItemProvider = new ViewpointItemProvider(this);
		}

		return viewpointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.TaskDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskDefinitionItemProvider taskDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.TaskDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTaskDefinitionAdapter() {
		if (taskDefinitionItemProvider == null) {
			taskDefinitionItemProvider = new TaskDefinitionItemProvider(this);
		}

		return taskDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.WorkProductDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkProductDefinitionItemProvider workProductDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.WorkProductDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createWorkProductDefinitionAdapter() {
		if (workProductDefinitionItemProvider == null) {
			workProductDefinitionItemProvider = new WorkProductDefinitionItemProvider(this);
		}

		return workProductDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.ISPEMMethodLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ISPEMMethodLibraryItemProvider ispemMethodLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.ISPEMMethodLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createISPEMMethodLibraryAdapter() {
		if (ispemMethodLibraryItemProvider == null) {
			ispemMethodLibraryItemProvider = new ISPEMMethodLibraryItemProvider(this);
		}

		return ispemMethodLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DevelopmentMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevelopmentMethodItemProvider developmentMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DevelopmentMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDevelopmentMethodAdapter() {
		if (developmentMethodItemProvider == null) {
			developmentMethodItemProvider = new DevelopmentMethodItemProvider(this);
		}

		return developmentMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.EngineeringDomainPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EngineeringDomainPackageItemProvider engineeringDomainPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.EngineeringDomainPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEngineeringDomainPackageAdapter() {
		if (engineeringDomainPackageItemProvider == null) {
			engineeringDomainPackageItemProvider = new EngineeringDomainPackageItemProvider(this);
		}

		return engineeringDomainPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DevelopmentMethodPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevelopmentMethodPackageItemProvider developmentMethodPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DevelopmentMethodPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDevelopmentMethodPackageAdapter() {
		if (developmentMethodPackageItemProvider == null) {
			developmentMethodPackageItemProvider = new DevelopmentMethodPackageItemProvider(this);
		}

		return developmentMethodPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.OntologyLinkedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyLinkedElementItemProvider ontologyLinkedElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.OntologyLinkedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOntologyLinkedElementAdapter() {
		if (ontologyLinkedElementItemProvider == null) {
			ontologyLinkedElementItemProvider = new OntologyLinkedElementItemProvider(this);
		}

		return ontologyLinkedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.ArtifactDefinitionPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactDefinitionPackageItemProvider artifactDefinitionPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.ArtifactDefinitionPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createArtifactDefinitionPackageAdapter() {
		if (artifactDefinitionPackageItemProvider == null) {
			artifactDefinitionPackageItemProvider = new ArtifactDefinitionPackageItemProvider(this);
		}

		return artifactDefinitionPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.Artifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactItemProvider artifactItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.Artifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createArtifactAdapter() {
		if (artifactItemProvider == null) {
			artifactItemProvider = new ArtifactItemProvider(this);
		}

		return artifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.ArtifactTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactTransformationItemProvider artifactTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.ArtifactTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createArtifactTransformationAdapter() {
		if (artifactTransformationItemProvider == null) {
			artifactTransformationItemProvider = new ArtifactTransformationItemProvider(this);
		}

		return artifactTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DomainTaskDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainTaskDefinitionItemProvider domainTaskDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DomainTaskDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDomainTaskDefinitionAdapter() {
		if (domainTaskDefinitionItemProvider == null) {
			domainTaskDefinitionItemProvider = new DomainTaskDefinitionItemProvider(this);
		}

		return domainTaskDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.MethodTaskDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodTaskDefinitionItemProvider methodTaskDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.MethodTaskDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMethodTaskDefinitionAdapter() {
		if (methodTaskDefinitionItemProvider == null) {
			methodTaskDefinitionItemProvider = new MethodTaskDefinitionItemProvider(this);
		}

		return methodTaskDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DomainArtifactDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainArtifactDefinitionItemProvider domainArtifactDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DomainArtifactDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDomainArtifactDefinitionAdapter() {
		if (domainArtifactDefinitionItemProvider == null) {
			domainArtifactDefinitionItemProvider = new DomainArtifactDefinitionItemProvider(this);
		}

		return domainArtifactDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.MethodArtifactDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodArtifactDefinitionItemProvider methodArtifactDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.MethodArtifactDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMethodArtifactDefinitionAdapter() {
		if (methodArtifactDefinitionItemProvider == null) {
			methodArtifactDefinitionItemProvider = new MethodArtifactDefinitionItemProvider(this);
		}

		return methodArtifactDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DomainContentPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainContentPackageItemProvider domainContentPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DomainContentPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDomainContentPackageAdapter() {
		if (domainContentPackageItemProvider == null) {
			domainContentPackageItemProvider = new DomainContentPackageItemProvider(this);
		}

		return domainContentPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DevelopmentMethodContentPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevelopmentMethodContentPackageItemProvider developmentMethodContentPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DevelopmentMethodContentPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDevelopmentMethodContentPackageAdapter() {
		if (developmentMethodContentPackageItemProvider == null) {
			developmentMethodContentPackageItemProvider = new DevelopmentMethodContentPackageItemProvider(this);
		}

		return developmentMethodContentPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.LanguageArtifactDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageArtifactDefinitionItemProvider languageArtifactDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.LanguageArtifactDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLanguageArtifactDefinitionAdapter() {
		if (languageArtifactDefinitionItemProvider == null) {
			languageArtifactDefinitionItemProvider = new LanguageArtifactDefinitionItemProvider(this);
		}

		return languageArtifactDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.LanguageTaskDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageTaskDefinitionItemProvider languageTaskDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.LanguageTaskDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLanguageTaskDefinitionAdapter() {
		if (languageTaskDefinitionItemProvider == null) {
			languageTaskDefinitionItemProvider = new LanguageTaskDefinitionItemProvider(this);
		}

		return languageTaskDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.DevelopmentMethodWithLanguageContentPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevelopmentMethodWithLanguageContentPackageItemProvider developmentMethodWithLanguageContentPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.DevelopmentMethodWithLanguageContentPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDevelopmentMethodWithLanguageContentPackageAdapter() {
		if (developmentMethodWithLanguageContentPackageItemProvider == null) {
			developmentMethodWithLanguageContentPackageItemProvider = new DevelopmentMethodWithLanguageContentPackageItemProvider(this);
		}

		return developmentMethodWithLanguageContentPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.RepresentativeLanguage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepresentativeLanguageItemProvider representativeLanguageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.RepresentativeLanguage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRepresentativeLanguageAdapter() {
		if (representativeLanguageItemProvider == null) {
			representativeLanguageItemProvider = new RepresentativeLanguageItemProvider(this);
		}

		return representativeLanguageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.RepresentLanguagePackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepresentLanguagePackageItemProvider representLanguagePackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.RepresentLanguagePackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRepresentLanguagePackageAdapter() {
		if (representLanguagePackageItemProvider == null) {
			representLanguagePackageItemProvider = new RepresentLanguagePackageItemProvider(this);
		}

		return representLanguagePackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.MetaModelPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaModelPackageItemProvider metaModelPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.MetaModelPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMetaModelPackageAdapter() {
		if (metaModelPackageItemProvider == null) {
			metaModelPackageItemProvider = new MetaModelPackageItemProvider(this);
		}

		return metaModelPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.MetaModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaModelItemProvider metaModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.MetaModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMetaModelAdapter() {
		if (metaModelItemProvider == null) {
			metaModelItemProvider = new MetaModelItemProvider(this);
		}

		return metaModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.EClassesRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EClassesRelationItemProvider eClassesRelationItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.EClassesRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEClassesRelationAdapter() {
		if (eClassesRelationItemProvider == null) {
			eClassesRelationItemProvider = new EClassesRelationItemProvider(this);
		}

		return eClassesRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.EReferencesRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EReferencesRelationItemProvider eReferencesRelationItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.EReferencesRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEReferencesRelationAdapter() {
		if (eReferencesRelationItemProvider == null) {
			eReferencesRelationItemProvider = new EReferencesRelationItemProvider(this);
		}

		return eReferencesRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.topcased.ispem.ArtifactDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactDefinitionItemProvider artifactDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.topcased.ispem.ArtifactDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createArtifactDefinitionAdapter() {
		if (artifactDefinitionItemProvider == null) {
			artifactDefinitionItemProvider = new ArtifactDefinitionItemProvider(this);
		}

		return artifactDefinitionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (engineeringDomainItemProvider != null) engineeringDomainItemProvider.dispose();
		if (toolDefinitionItemProvider != null) toolDefinitionItemProvider.dispose();
		if (viewpointItemProvider != null) viewpointItemProvider.dispose();
		if (taskDefinitionItemProvider != null) taskDefinitionItemProvider.dispose();
		if (workProductDefinitionItemProvider != null) workProductDefinitionItemProvider.dispose();
		if (ispemMethodLibraryItemProvider != null) ispemMethodLibraryItemProvider.dispose();
		if (developmentMethodItemProvider != null) developmentMethodItemProvider.dispose();
		if (engineeringDomainPackageItemProvider != null) engineeringDomainPackageItemProvider.dispose();
		if (developmentMethodPackageItemProvider != null) developmentMethodPackageItemProvider.dispose();
		if (ontologyLinkedElementItemProvider != null) ontologyLinkedElementItemProvider.dispose();
		if (artifactDefinitionPackageItemProvider != null) artifactDefinitionPackageItemProvider.dispose();
		if (artifactItemProvider != null) artifactItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (artifactTransformationItemProvider != null) artifactTransformationItemProvider.dispose();
		if (domainTaskDefinitionItemProvider != null) domainTaskDefinitionItemProvider.dispose();
		if (methodTaskDefinitionItemProvider != null) methodTaskDefinitionItemProvider.dispose();
		if (domainArtifactDefinitionItemProvider != null) domainArtifactDefinitionItemProvider.dispose();
		if (methodArtifactDefinitionItemProvider != null) methodArtifactDefinitionItemProvider.dispose();
		if (domainContentPackageItemProvider != null) domainContentPackageItemProvider.dispose();
		if (developmentMethodContentPackageItemProvider != null) developmentMethodContentPackageItemProvider.dispose();
		if (processItemProvider != null) processItemProvider.dispose();
		if (languageArtifactDefinitionItemProvider != null) languageArtifactDefinitionItemProvider.dispose();
		if (languageTaskDefinitionItemProvider != null) languageTaskDefinitionItemProvider.dispose();
		if (developmentMethodWithLanguageContentPackageItemProvider != null) developmentMethodWithLanguageContentPackageItemProvider.dispose();
		if (representativeLanguageItemProvider != null) representativeLanguageItemProvider.dispose();
		if (representLanguagePackageItemProvider != null) representLanguagePackageItemProvider.dispose();
		if (metaModelPackageItemProvider != null) metaModelPackageItemProvider.dispose();
		if (metaModelItemProvider != null) metaModelItemProvider.dispose();
		if (eClassesRelationItemProvider != null) eClassesRelationItemProvider.dispose();
		if (eReferencesRelationItemProvider != null) eReferencesRelationItemProvider.dispose();
		if (artifactDefinitionItemProvider != null) artifactDefinitionItemProvider.dispose();
	}

}
